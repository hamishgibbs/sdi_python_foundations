---
title: "Welcome to Foundations of Python"
author: "Hamish Gibbs"
format: revealjs
execute:
  enabled: true
---

## Introduction

UCL Social Data Institute: Foundations of Python 

![](https://www.ucl.ac.uk/social-data/sites/social_data/files/social_data_institute_banner_image_1400_x_420_2.jpg?sd35v8)

## Course aims

* A foundation in Python programming.  
    * *Variables, data structures, control logic, functions, classes.*
* An Introduction to popular Python tools for data science.  
    * *pandas, matplotlib, sklearn.*
* *Side quest:* Collaboration tools.
    * *git, GitHub*
* A hands-on data science challenge.
    * Predicting the price of AirBnBs in London.

## About you

* Programming experience?
* Statistics experience?
* Any installation problems?

## About me
::: {.columns}
::: {.column width="50%"}

* Final year PhD student
    * *Supervised by James Cheshire*
* My research interests: 
    * *Human mobility, disease transmission, bias & uncertainty*
* Python experience: 
    * *9 years*
:::

::: {.column width="50%"}
![](./img/pub_fig.png)
<div style="font-size: 0.7em;"><small>Gibbs et. al., *Detecting behavioural changes in human movement to inform the spatial scale of interventions against COVID-19*, PLOS Computational Biology (2021)</small></div>
:::
:::

## Course format
* *This is a short course!*
* Days 1 – 3: lectures and practicals.
    * Practical sessions rely on existing Python tutorials.
    * Once you have worked through a practical, try to play around with the concepts it introduces until you *"get it"*.
* Day 4: Working together on a collaborative challenge.

## Schedule

* **Day 1:** Python basics.
    * Variables, data structures (`list`, `dict`), control logic (`if`, `for`, `while`).
* **Day 2:** Abstraction & composition.
    * Functions (`def`), Classes (`class`).
    * *Also:* Using `.py` files, not `.ipynb`.

## Schedule

* **Day 3:** Python data science.
    * `pandas`, `numpy`, `matplotlib`.
    * *Also:* Collaboration with `git` and GitHub.
* **Day 4:** Challenge: regression analysis.
    * Predicting the price of London AirBnBs using [Inside AirBnB](https://insideairbnb.com/) data.

## Learning python

<div style="text-align: center; vertical-align: middle; height: 100%;">
  <img src="https://www.writerswrite.co.za/wp-content/uploads/2018/04/Practice-Makes-Perfect.jpg" style="max-height: 80%;">
  <div style="font-size: 0.7em;"><small>Source: <a href="https://www.instagram.com/p/Bc7d-jxHG4a/">Sarah's Scribbles</small></a></div>
</div>

## Learning python

* Practice is the most important ingredient to becoming a good programmer.
* It is easier to "practice" if you find *personally compelling* reasons to use Python.
    * Coursework, side projects, random curiosity, automating things in your life.
* Programming is all about trial and error.

## AI

* New AI programming assistants:
    * *Chat GPT, GitHub Copilot, Copilot Chat.*
* I recommend using them all, especially as a study aid.
    * **Bad idea:** Using AI to *generate* code you can't understand.
    * **Good idea:** Using AI to *explain* code you can't understand.

## Any questions?

## Basic data types

::: {.rows}
::: {.row height="25%"}

<h4>Integer</h4>
```r
as.integer(10) # R
```
```python
int(10) # Python
```

:::

::: {.row height="25%"}

<h4>Float</h4>

```r
as.numeric(10.3) # R
```
```python
float(10.3) # Python
```

:::

::: {.row height="25%"}

<h4>String</h4>

```r
as.character("Hello") # R
```
```python
str("Hello") # Python
```

:::
::: {.row height="25%"}

<h4>Type checking</h4>

```r
class("Hello") # R
```
```python
type("Hello") # Python
```

:::
:::

## Tutorial #1: Variables

* [Variables, expressions, and statements](https://www.py4e.com/html3/02-variables) 
* Core concepts: 
    * Variable assignment and basic math

        ```python
        minute = 20
        minute + 32
        ```
    * Working with strings

        ```python
        first = '100'
        second = '150'
        print(first + second)
        ```
    * Sub setting strings
        
        ```python
        word = 'Python'
        word[0]
        ```

## Tutorial #2: Lists

* [An informal introduction to python §3.1.3](https://docs.python.org/3/tutorial/introduction.html#lists)
* Core concepts: 
    * List indexing

        ```python
        squares = [1, 4, 9, 16, 25]
        squares[0]
        ```
    * List manipulation

        ```python
        squares + [36, 49, 64, 81, 100]
        squares.append(10)
        ```
    * List mutability

        ```python
        rgb = ["Red", "Green", "Blue"]
        rgba = rgb
        id(rgb) == id(rgba)  # they reference the same object
        ```

## One more data structure: tuples

* A `tuple` is an immutable collection of values.

```python
coord = (0, 1) # a single tuple
coords = [coord, coord] # a list of tuples
```

* Unlike a `list`, the values in a `tuple` cannot be changed.
    * This means no `.append()` or `.sort()` methods (which both change the values in a `list`).
* Tuples are faster than lists and good when you have a collection of values that won't have to change once it has been created.

## Just one more data structure: set

* A `set` is an unordered collection with no duplicate elements.

    ```python
    set1 = {0, 1} # a set
    set2 = set([0, 1]) # creating a set from a list
    ```

* A `set` is mutable (its values can be changed).
* It is very quick to check if an element is in a `set`:

    ```python
    1 in {0, 1} # I'm faster!
    1 in [0, 1]
    ```
    * This doesn't matter for a collection of 2 values, but matters a lot for larger collections.
    

## Tutorial #3: Dictionaries

* [Dictionaries §1](https://www.py4e.com/html3/09-dictionaries)
    * *To start, only work on the first section of this tutorial!*
    * *If you "get it," try some of the exercises in Tutorial #1, or move on to this afternoon's tutorials.*
* Core concepts: 
    * The `{key: value}` format of dictionaries

        ```python
        eng2sp = dict()
        eng2sp['one'] = 'uno'
        eng2sp['one']
        ```
    * The `.items()`, `.keys()`, and `.values()` methods

## Using Python

* [Interactive shell](https://docs.python.org/3/tutorial/interpreter.html)
    
    ```shell
    >>> print("Hello")
    Hello
    ```
    * *Clunky, ephemeral, hard to use for anything 'real'.*
* [Google Colab](https://colab.research.google.com/)
    * Google-hosted version of a [Jupyter Notebook](https://jupyter.org/)
    * *A very easy way to start!*
* [Visual Studio Code](https://code.visualstudio.com/)
    * A "serious" integrated development environment.
    * *Good for larger projects, collaboration.*

## Setting up Colab

* Does everyone have a Google account?
* Go to [colab.research.google.com](https://colab.research.google.com/).
* Open a new notebook.

    ![](./img/new_notebook.png)
* Rename your notebook.
* Get started!
